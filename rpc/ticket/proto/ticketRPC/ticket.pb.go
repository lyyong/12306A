// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: ticket.proto

package ticketRPC

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TrainId        uint32 `protobuf:"varint,2,opt,name=train_id,json=trainId,proto3" json:"train_id,omitempty"`                        // 列车id
	StartStationId uint32 `protobuf:"varint,3,opt,name=start_station_id,json=startStationId,proto3" json:"start_station_id,omitempty"` // 起始站
	StartTime      string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	DestStationId  uint32 `protobuf:"varint,5,opt,name=dest_station_id,json=destStationId,proto3" json:"dest_station_id,omitempty"` // 目的站
	ArriveTime     string `protobuf:"bytes,6,opt,name=arrive_time,json=arriveTime,proto3" json:"arrive_time,omitempty"`
	Date           string `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`                                           // 乘车日期
	SeatTypeId     uint32 `protobuf:"varint,8,opt,name=seat_type_id,json=seatTypeId,proto3" json:"seat_type_id,omitempty"`          // 座位类型（硬座、卧铺、一等、二等）
	CarriageNumber string `protobuf:"bytes,9,opt,name=carriage_number,json=carriageNumber,proto3" json:"carriage_number,omitempty"` // 车厢号
	SeatNumber     string `protobuf:"bytes,10,opt,name=seat_number,json=seatNumber,proto3" json:"seat_number,omitempty"`            // 座号
	PassengerId    uint32 `protobuf:"varint,11,opt,name=passenger_id,json=passengerId,proto3" json:"passenger_id,omitempty"`        // 乘车人id
	IndentId       uint32 `protobuf:"varint,12,opt,name=indent_id,json=indentId,proto3" json:"indent_id,omitempty"`                 // 订单号
	Amount         int32  `protobuf:"varint,13,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ticket) GetTrainId() uint32 {
	if x != nil {
		return x.TrainId
	}
	return 0
}

func (x *Ticket) GetStartStationId() uint32 {
	if x != nil {
		return x.StartStationId
	}
	return 0
}

func (x *Ticket) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Ticket) GetDestStationId() uint32 {
	if x != nil {
		return x.DestStationId
	}
	return 0
}

func (x *Ticket) GetArriveTime() string {
	if x != nil {
		return x.ArriveTime
	}
	return ""
}

func (x *Ticket) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Ticket) GetSeatTypeId() uint32 {
	if x != nil {
		return x.SeatTypeId
	}
	return 0
}

func (x *Ticket) GetCarriageNumber() string {
	if x != nil {
		return x.CarriageNumber
	}
	return ""
}

func (x *Ticket) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *Ticket) GetPassengerId() uint32 {
	if x != nil {
		return x.PassengerId
	}
	return 0
}

func (x *Ticket) GetIndentId() uint32 {
	if x != nil {
		return x.IndentId
	}
	return 0
}

func (x *Ticket) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{1}
}

type Tickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets []*Ticket `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
}

func (x *Tickets) Reset() {
	*x = Tickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tickets) ProtoMessage() {}

func (x *Tickets) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tickets.ProtoReflect.Descriptor instead.
func (*Tickets) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *Tickets) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type GetByIndentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndentId uint32 `protobuf:"varint,1,opt,name=indent_id,json=indentId,proto3" json:"indent_id,omitempty"`
}

func (x *GetByIndentRequest) Reset() {
	*x = GetByIndentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIndentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIndentRequest) ProtoMessage() {}

func (x *GetByIndentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIndentRequest.ProtoReflect.Descriptor instead.
func (*GetByIndentRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *GetByIndentRequest) GetIndentId() uint32 {
	if x != nil {
		return x.IndentId
	}
	return 0
}

type GetByPassengerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassengerId uint32 `protobuf:"varint,1,opt,name=passenger_id,json=passengerId,proto3" json:"passenger_id,omitempty"`
}

func (x *GetByPassengerRequest) Reset() {
	*x = GetByPassengerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByPassengerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByPassengerRequest) ProtoMessage() {}

func (x *GetByPassengerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByPassengerRequest.ProtoReflect.Descriptor instead.
func (*GetByPassengerRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *GetByPassengerRequest) GetPassengerId() uint32 {
	if x != nil {
		return x.PassengerId
	}
	return 0
}

type UpdateStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId uint32 `protobuf:"varint,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	State    string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"` // 要修改的状态
}

func (x *UpdateStateRequest) Reset() {
	*x = UpdateStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateRequest) ProtoMessage() {}

func (x *UpdateStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateStateRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateStateRequest) GetTicketId() uint32 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

func (x *UpdateStateRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

var File_ticket_proto protoreflect.FileDescriptor

var file_ticket_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x50, 0x43, 0x22, 0x9d, 0x03, 0x0a, 0x06, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x36, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x32, 0xa5, 0x02, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x12, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x50, 0x43, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x10, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x50, 0x43, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x50, 0x43, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x50, 0x43, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ticket_proto_rawDescOnce sync.Once
	file_ticket_proto_rawDescData = file_ticket_proto_rawDesc
)

func file_ticket_proto_rawDescGZIP() []byte {
	file_ticket_proto_rawDescOnce.Do(func() {
		file_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticket_proto_rawDescData)
	})
	return file_ticket_proto_rawDescData
}

var file_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ticket_proto_goTypes = []interface{}{
	(*Ticket)(nil),                // 0: ticketRPC.Ticket
	(*Empty)(nil),                 // 1: ticketRPC.Empty
	(*Tickets)(nil),               // 2: ticketRPC.Tickets
	(*GetByIndentRequest)(nil),    // 3: ticketRPC.GetByIndentRequest
	(*GetByPassengerRequest)(nil), // 4: ticketRPC.GetByPassengerRequest
	(*UpdateStateRequest)(nil),    // 5: ticketRPC.UpdateStateRequest
}
var file_ticket_proto_depIdxs = []int32{
	0, // 0: ticketRPC.Tickets.tickets:type_name -> ticketRPC.Ticket
	2, // 1: ticketRPC.TicketService.AddTickets:input_type -> ticketRPC.Tickets
	3, // 2: ticketRPC.TicketService.GetTicketByIndentId:input_type -> ticketRPC.GetByIndentRequest
	4, // 3: ticketRPC.TicketService.GetTicketByPassengerId:input_type -> ticketRPC.GetByPassengerRequest
	5, // 4: ticketRPC.TicketService.UpdateState:input_type -> ticketRPC.UpdateStateRequest
	1, // 5: ticketRPC.TicketService.AddTickets:output_type -> ticketRPC.Empty
	2, // 6: ticketRPC.TicketService.GetTicketByIndentId:output_type -> ticketRPC.Tickets
	2, // 7: ticketRPC.TicketService.GetTicketByPassengerId:output_type -> ticketRPC.Tickets
	1, // 8: ticketRPC.TicketService.UpdateState:output_type -> ticketRPC.Empty
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ticket_proto_init() }
func file_ticket_proto_init() {
	if File_ticket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIndentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByPassengerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticket_proto_goTypes,
		DependencyIndexes: file_ticket_proto_depIdxs,
		MessageInfos:      file_ticket_proto_msgTypes,
	}.Build()
	File_ticket_proto = out.File
	file_ticket_proto_rawDesc = nil
	file_ticket_proto_goTypes = nil
	file_ticket_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketServiceClient interface {
	AddTickets(ctx context.Context, in *Tickets, opts ...grpc.CallOption) (*Empty, error)
	GetTicketByIndentId(ctx context.Context, in *GetByIndentRequest, opts ...grpc.CallOption) (*Tickets, error)
	GetTicketByPassengerId(ctx context.Context, in *GetByPassengerRequest, opts ...grpc.CallOption) (*Tickets, error)
	UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*Empty, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) AddTickets(ctx context.Context, in *Tickets, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticketRPC.TicketService/AddTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketByIndentId(ctx context.Context, in *GetByIndentRequest, opts ...grpc.CallOption) (*Tickets, error) {
	out := new(Tickets)
	err := c.cc.Invoke(ctx, "/ticketRPC.TicketService/GetTicketByIndentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketByPassengerId(ctx context.Context, in *GetByPassengerRequest, opts ...grpc.CallOption) (*Tickets, error) {
	out := new(Tickets)
	err := c.cc.Invoke(ctx, "/ticketRPC.TicketService/GetTicketByPassengerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticketRPC.TicketService/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
type TicketServiceServer interface {
	AddTickets(context.Context, *Tickets) (*Empty, error)
	GetTicketByIndentId(context.Context, *GetByIndentRequest) (*Tickets, error)
	GetTicketByPassengerId(context.Context, *GetByPassengerRequest) (*Tickets, error)
	UpdateState(context.Context, *UpdateStateRequest) (*Empty, error)
}

// UnimplementedTicketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (*UnimplementedTicketServiceServer) AddTickets(context.Context, *Tickets) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTickets not implemented")
}
func (*UnimplementedTicketServiceServer) GetTicketByIndentId(context.Context, *GetByIndentRequest) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByIndentId not implemented")
}
func (*UnimplementedTicketServiceServer) GetTicketByPassengerId(context.Context, *GetByPassengerRequest) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByPassengerId not implemented")
}
func (*UnimplementedTicketServiceServer) UpdateState(context.Context, *UpdateStateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}

func RegisterTicketServiceServer(s *grpc.Server, srv TicketServiceServer) {
	s.RegisterService(&_TicketService_serviceDesc, srv)
}

func _TicketService_AddTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tickets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).AddTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticketRPC.TicketService/AddTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).AddTickets(ctx, req.(*Tickets))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketByIndentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIndentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketByIndentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticketRPC.TicketService/GetTicketByIndentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketByIndentId(ctx, req.(*GetByIndentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketByPassengerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketByPassengerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticketRPC.TicketService/GetTicketByPassengerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketByPassengerId(ctx, req.(*GetByPassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticketRPC.TicketService/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UpdateState(ctx, req.(*UpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticketRPC.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTickets",
			Handler:    _TicketService_AddTickets_Handler,
		},
		{
			MethodName: "GetTicketByIndentId",
			Handler:    _TicketService_GetTicketByIndentId_Handler,
		},
		{
			MethodName: "GetTicketByPassengerId",
			Handler:    _TicketService_GetTicketByPassengerId_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _TicketService_UpdateState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket.proto",
}
